<?xml version="1.0" encoding="UTF-8"?>
<chapter xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="apis" xmlns:xlink="http://www.w3.org/1999/xlink">
	<title>Twitter API Binding</title>
  
	<para>
		Spring Social Twitter offers integration with Twitter's REST API through the <interfacename>Twitter</interfacename> interface and its implementation, <classname>TwitterTemplate</classname>.			
	</para>

	<para>
		Creating an instance of <classname>TwitterTemplate</classname> involves invoking its constructor, passing in the application's OAuth credentials and an access token/secret pair authorizing the application to act on a user's behalf. 
		For example:
	</para>
	
	<programlisting language="java"><![CDATA[
String consumerKey = "..."; // The application's consumer key
String consumerSecret = "..."; // The application's consumer secret
String accessToken = "..."; // The access token granted after OAuth authorization
String accessTokenSecret = "..."; // The access token secret granted after OAuth authorization
Twitter twitter = new TwitterTemplate(consumerKey, consumerSecret, accessToken, accessTokenSecret);]]>
	</programlisting>
	
	<para>
		In addition, <classname>TwitterTemplate</classname> has a default constructor that creates an instance without any OAuth credentials:
	</para>
	
	<programlisting language="java"><![CDATA[
Twitter twitter = new TwitterTemplate();]]>
	</programlisting>
	
	<para>
		When constructed with the default constructor, <classname>TwitterTemplate</classname> will allow a few simple operations that do not require authorization, such as searching. 
		Attempting other operations, such as tweeting will fail with an <classname>MissingAuthorizationException</classname> being thrown.
	</para>
	
	<para>
		If you are using Spring Social's <ulink url="https://docs.spring.io/spring-social/docs/1.0.x/reference/html/serviceprovider.html">service provider framework</ulink>, you can get an instance of <interfacename>Twitter</interfacename> from a <interfacename>Connection</interfacename>. 
		For example, the following snippet calls <methodname>getApi()</methodname> on a connection to retrieve a <interfacename>Twitter</interfacename>:
	</para>				
	
	<programlisting language="java"><![CDATA[
Connection<Twitter> connection = connectionRepository.findPrimaryConnection(Twitter.class);
Twitter twitter = connection != null ? connection.getApi() : new TwitterTemplate();]]>
	</programlisting>
	
	<para>
		Here, <interfacename>ConnectionRepository</interfacename> is being asked for the primary connection that the current user has with Twitter.
		If connection to Twitter is found, a call to <methodname>getApi()</methodname> retrieves a <interfacename>Twitter</interfacename> instance that is configured with the connection details received when the connection was first established.
		If there is no connection, a default instance of <classname>TwitterTemplate</classname> is created.
	</para>
	
	<para>
		Once you have a <interfacename>Twitter</interfacename>, you can perform a several operations against Twitter.
		<interfacename>Twitter</interfacename> is defined as follows:
	</para>
	
	<programlisting language="java"><![CDATA[
public interface Twitter {

   boolean isAuthorizedForUser();

   DirectMessageOperations directMessageOperations();

   FriendOperations friendOperations();

   GeoOperations geoOperations();

   ListOperations listOperations();

   SearchOperations searchOperations();

   TimelineOperations timelineOperations();

   UserOperations userOperations();

}]]>
	</programlisting>		
	
	<para>
		The <methodname>isAuthorizedForUser</methodname> helps determine if the <interfacename>Twitter</interfacename> instance has been created with credentials to perform on behalf of a user.
		It will return true if it is capable of performing operations requiring authorization; false otherwise. 			
	</para>
	
	<para>
		The remaining six methods return sub-APIs, partitioning the Twitter service API into divisions targeting specific facets of Twitter functionality.
		These sub-APIs are defined by interfaces described in <xref linkend="table-twitter-sub-apis" />.
	</para>
	
	<table xml:id="table-twitter-sub-apis">
		<title>Twitter's Sub-APIs</title>
		<tgroup cols="2">
			<colspec align="left" />
			<colspec colnum="1" colname="col1" colwidth="2*"/>
			<colspec colnum="2" colname="col2" colwidth="2*"/>
			<thead>
				<row>
					<entry align="center">Sub-API Interface</entry>
					<entry align="center">Description</entry>
				</row>
			</thead>
			<tbody>
				<row>
					<entry>DirectMessageOperations</entry>
					<entry>Reading and sending direct messages.</entry>
				</row>
				<row>
					<entry>FriendOperations</entry>
					<entry>Retrieving a user's list of friends and followers and following/unfollowing users.</entry>
				</row>
				<row>
					<entry>GeoOperations</entry>
					<entry>Working with locations.</entry>
				</row>
				<row>
					<entry>ListOperations</entry>
					<entry>Maintaining, subscribing to, and unsubscribing from user lists</entry>
				</row>
				<row>
					<entry>SearchOperations</entry>
					<entry>Searching tweets and viewing search trends</entry>
				</row>
				<row>
					<entry>TimelineOperations</entry>
					<entry>Reading timelines and posting tweets.</entry>
				</row>
				<row>
					<entry>UserOperations</entry>
					<entry>Retrieving user profile data.</entry>
				</row>
			</tbody>
		</tgroup>
	</table>
	
	<para>
		What follows is a survey of common tasks you may perform with <interfacename>Twitter</interfacename> and its sub-APIs.
		For complete details on the Spring Social's entire Twitter API binding, refer to the JavaDoc.
	</para>

	<section id="twitter-getProfile">
		<title>Retrieving a user's Twitter profile data</title>
		
		<para>
			To get a user's Twitter profile, call <interfacename>UserOperations</interfacename>' <methodname>getUserProfile()</methodname>:
		</para>
		
		<programlisting language="java"><![CDATA[
TwitterProfile profile = twitter.userOperations().getUserProfile();]]>
		</programlisting>
		
		<para>
			This returns a <classname>TwitterProfile</classname> object containing profile data for the authenticated user. 
			This profile information includes the user's Twitter screen name, their name, location, description, and the date that they created their Twitter account. 
			Also included is a URL to their profile image.
		</para>
		
		<para>
			If you want to retrieve the user profile for a specific user other than the authenticated user, you can so do by passing the user's screen name as a parameter to <methodname>getUserProfile()</methodname>:
		</para>
		
		<programlisting language="java"><![CDATA[
TwitterProfile profile = twitter.userOperations().getUserProfile("habuma");]]>
		</programlisting>
		
		<para>
			If all you need is the screen name for the authenticating user, then call <methodname>UserOperations.getScreenName()</methodname>:
		</para>
		
		<programlisting language="java"><![CDATA[
String profileId = twitter.userOperations().getScreenName();]]>
		</programlisting>

	</section>

	<section id="twitter-status">
		<title>Tweeting</title>
		
		<para>
			To post a message to Twitter the simplest thing to do is to pass the message to the <methodname>updateStatus()</methodname> method provided by <interfacename>TimelineOperations</interfacename>:
		</para>
		
		<programlisting language="java"><![CDATA[
twitter.timelineOperations().updateStatus("Spring Social is awesome!")]]>
		</programlisting>
		
		<para>
			Optionally, you may also include metadata about the tweet, such as the location (latitude and longitude) you are tweeting from. 
			For that, pass in a <classname>StatusDetails</classname> object, setting the location property:
		</para>
		
		<programlisting language="java"><![CDATA[
StatusDetails statusDetails = new StatusDetails().setLocation(51.502f, -0.126f);
twitter.timelineOperations().updateStatus("I'm tweeting from London!", statusDetails)]]>
		</programlisting>
		
		<para>
			To have Twitter display the location in a map (on the Twitter web site) then you should also set the <code>displayCoordinates</code> property to <code>true</code>:
		</para>
		
		<programlisting language="java"><![CDATA[
StatusDetails statusDetails = new StatusDetails().setLocation(51.502f, -0.126f).setDisplayCoordinates(true);
twitter.timelineOperations().updateStatus("I'm tweeting from London!", statusDetails)]]>
		</programlisting>
		
		
		<para>
			If you'd like to retweet another tweet (perhaps one found while searching or reading the Twitter timeline), call the <methodname>retweet()</methodname> method, passing in the ID of the tweet to be retweeted:
		</para>
		
		<programlisting language="java"><![CDATA[
long tweetId = tweet.getId();
twitter.timelineOperations().retweet(tweetId);]]>
		</programlisting>
		
		<para>
			Note that Twitter disallows repeated tweets. 
			Attempting to tweet or retweet the same message multiple times will result in a <classname>DuplicateTweetException</classname> being thrown.
		</para>
	</section>

	<section id="twitter-timelines">
		<title>Reading Twitter timelines</title> <!-- and mentions -->
		
		<para>
			From a Twitter user's perspective, Twitter organizes tweets into four different timelines:
		</para>
		
		<itemizedlist>
			<listitem><para>User - Includes tweets posted by the user.</para></listitem>
			<listitem><para>Friends - Includes tweets from the user's timeline and the timeline of anyone that they follow, with the exception of any retweets.</para></listitem>
			<listitem><para>Home - Includes tweets from the user's timeline and the timeline of anyone that they follow.</para></listitem>
			<listitem><para>Public - Includes tweets from all Twitter users.</para></listitem>
		</itemizedlist>
		
		<para>
			To be clear, the only difference between the home timeline and the friends timeline is that the friends timeline excludes retweets.
		</para>
		
		<para>
			<interfacename>TimelineOperations</interfacename> also supports reading of tweets from one of the available Twitter timelines. 
			To retrieve the 20 most recent tweets from the public timeline, use the <methodname>getPublicTimeline()</methodname> method:
		</para>
		
		<programlisting language="java"><![CDATA[
List<Tweet> tweets = twitter.timelineOperations().getPublicTimeline();]]>
		</programlisting>
		
		<para>
			<methodname>getHomeTimeline()</methodname> retrieves the 20 most recent tweets from the user's home timeline:
		</para>
		
		<programlisting language="java"><![CDATA[
List<Tweet> tweets = twitter.timelineOperations().getHomeTimeline();]]>
		</programlisting>
		
		<para>
			Similarly, <methodname>getFriendsTimeline()</methodname> retrieves the 20 most recent tweets from the user's friends timeline:
		</para>
		
		<programlisting language="java"><![CDATA[
List<Tweet> tweets = twitter.timelineOperations().getFriendsTimeline();]]>
		</programlisting>
		
		<para>
			To get tweets from the authenticating user's own timeline, call the <methodname>getUserTimeline()</methodname> method:
		</para>
		
		<programlisting language="java"><![CDATA[
List<Tweet> tweets = twitter.timelineOperations().getUserTimeline();]]>
		</programlisting>
		
		<para>
			If you'd like to retrieve the 20 most recent tweets from a specific user's timeline (not necessarily the authenticating user's timeline), pass the user's screen name in as a parameter to <methodname>getUserTimeline()</methodname>:
		</para>
		
		<programlisting language="java"><![CDATA[
List<Tweet> tweets = twitter.timelineOperations().getUserTimeline("rclarkson");]]>
		</programlisting>
		
		<para>
			In addition to the four Twitter timelines, you may also want to get a list of tweets mentioning the user. 
			The <methodname>getMentions()</methodname> method returns the 20 most recent tweets that mention the authenticating user:
		</para>
		
		<programlisting language="java"><![CDATA[
List<Tweet> tweets = twitter.timelineOperations().getMentions();]]>
		</programlisting>
		
	</section>

	<section id="twitter-friends">
		<title>Friends and Followers</title>
		
		<para>
			A key social concept in Twitter is the ability for one user to "follow" another user.
			The followed user's tweets will appear in the following user's home and friends timelines.
			To follow a user on behalf of the authenticating user, call the <interfacename>FriendOperations</interfacename>' <methodname>follow()</methodname> method:
		</para>
		
		<programlisting language="java"><![CDATA[
twitter.friendOperations().follow("habuma");]]>
		</programlisting>

		<para>
			Similarly, you may stop following a user using the <methodname>unfollow()</methodname> method:
		</para>

		<programlisting language="java"><![CDATA[
twitter.friendOperations().unfollow("habuma");]]>
		</programlisting>
		
		<para>
			If you want to see who a particular user is following, use the <methodname>getFriends()</methodname> method:
		</para>

		<programlisting language="java"><![CDATA[
List<TwitterProfile> friends = twitter.friendOperations().getFriends("habuma");]]>
		</programlisting>

		<para>
			On the other hand, you may be interested in seeing who is following a given user.
			In that case the <methodname>getFollowers()</methodname> method may be useful:
		</para>

		<programlisting language="java"><![CDATA[
List<TwitterProfile> followers = twitter.friendOperations().getFollowers("habuma");]]>
		</programlisting>
	</section>
	
	<section id="twitter-lists">
		<title>Twitter User Lists</title>
		
		<para>
			In addition to following other users, Twitter provides the ability for users to collect users in lists, regardless of whether or not they are being followed.
			These lists may be private to the use who created them or may be public for others to read and subscribe to.
		</para>
		
		<para>
			To create a new list, use <interfacename>ListOperations</interfacename>' <methodname>createList()</methodname> method:
		</para>
		
		<programlisting language="java"><![CDATA[
UserList familyList = twitter.listOperations().createList(
       "My Family", "Tweets from my immediate family members", false);]]>
		</programlisting>
		
		<para>
			<methodname>createList()</methodname> takes three parameters and returns a <classname>UserList</classname> object representing the newly created list.
			The first parameter is the name of the list.
			The second parameter is a brief description of the list.
			The final parameter is a boolean indicating whether or not the list is public.
			Here, false indicates that the list should be private.
			
		</para>
		
		<para>
			Once the list is created, you may add members to the list by calling the <methodname>addToList()</methodname> method:
		</para>

		<programlisting language="java"><![CDATA[
twitter.listOperations().addToList(familyList.getSlug(), "artnames");]]>
		</programlisting>
		
		<para>
			The first parameter given to <methodname>addToList()</methodname> is the list slug (which is readily available from the <classname>UserList</classname> object).
			The second parameter is the screen name of a user to add to the list.
		</para>
		
		<para>
			To remove a member from a list, pass the same parameters to <methodname>removedFromList()</methodname>:
		</para>

		<programlisting language="java"><![CDATA[
twitter.listOperations().removeFromList(familyList.getSlug(), "artnames");]]>
		</programlisting>


		<para>
			You can also subscribe to a list on behalf of the authenticating user.
			Subscribing to a list has the effect of including tweets from the list's members in the user's home timeline.
			The <methodname>subscribe()</methodname> method is used to subscribe to a list:
		</para>

		<programlisting language="java"><![CDATA[
twitter.listOperations().subscribe("habuma", "music");]]>
		</programlisting>			
		
		<para>
			Here, <methodname>subscribe()</methodname> is given the list owner's screen name ("habuma") and the list slug ("music").
		</para>
		
		<para>
			Similarly, you may unsubscribe from a list with the <methodname>unsubscribe()</methodname> method:
		</para>

		<programlisting language="java"><![CDATA[
twitter.listOperations().unsubscribe("habuma", "music");]]>
		</programlisting>			
	</section>		

	<section id="twitter-search">
		<title>Searching Twitter</title>
		
		<para>
			<interfacename>SearchOperations</interfacename> enables you to search the public timeline for tweets containing some text through its <methodname>search()</methodname> method.
		</para>
		
		<para>
			For example, to search for tweets containing "#spring":
		</para>
		
		<programlisting language="java"><![CDATA[
SearchResults results = twitter.searchOperations().search("#spring");]]>
		</programlisting>
		
		<para>
			The <methodname>search()</methodname> method will return a <classname>SearchResults</classname> object that includes a list of 50 most recent matching tweets as well as some metadata concerning the result set.
			The metadata includes the maximum tweet ID in the search results list as well as the ID of a tweet that precedes the resulting tweets. 
			The <code>sinceId</code> and <code>maxId</code> properties effectively define the boundaries of the result set. 
			Additionally, there's a boolean <code>lastPage</code> property that, if <code>true</code>, indicates that this result set is the page of results.
		</para>
		
		<para>
			To gain better control over the paging of results, you may choose to pass in the page and results per page to <methodname>search()</methodname>:
		</para>
		
		<programlisting language="java"><![CDATA[
SearchResults results = twitter.searchOperations().search("#spring", 2, 10);]]>
		</programlisting>
		
		<para>
			Here, we're asking for the 2nd page of results where the pages have 10 tweets per page.
		</para>
		
		<para>
			Finally, if you'd like to confine the bounds of the search results to fit between two tweet IDs, you may pass in the since and maximum tweet ID values to <methodname>search()</methodname>:
		</para>
		
		<programlisting language="java"><![CDATA[
SearchResults results = twitter.searchOperations().search("#spring", 2, 10, 145962, 210112);]]>
		</programlisting>
		
		<para>
			This ensures that the result set will not contain any tweets posted before the tweet whose ID is 146962 nor any tweets posted after the tweet whose ID is 210112.
		</para>
	</section>

    <section id="twitter-advanced-search">
        <title>Advanced search</title>

        <para>
            For more enhanced search you can also use <classname>SearchParameters</classname> object and pass it to <methodname>search()</methodname> method. It allows you to specify more search keys.
        </para>

        <para>
            For example, searching tweets containing "#spring" keyword in Dutch language:
        </para>

        <programlisting language="java"><![CDATA[
SearchParameters params = new SearchParameters("#spring");
params.setLang("nl");

SearchResults results = twitter.searchOperations().search(params);]]>
        </programlisting>

        <para>
            There are some more search parameters available:
        </para>

        <programlisting language="java"><![CDATA[
SearchParameters params = new SearchParameters("#spring");
params.setGeoCode(new GeoCode(52.379241, 4.900846, 100, GeoCode.Unit.MILE));
params.setLang("nl");
params.setResultType(SearchParameters.ResultType.RECENT);
params.setCount(25);
params.setIncludeEntities(false);

SearchResults results = twitter.searchOperations().search(params);]]>
        </programlisting>
    </section>

    <section id="twitter-directMessages">
		<title>Sending and receiving direct messages</title>
		
		<para>
			In addition to posting tweets to the public timelines, Twitter also supports sending of private messages directly to a given user. 
			<classname>DirectMessageOperations</classname>' <methodname>sendDirectMessage()</methodname> method can be used to send a direct message to another user:
		</para>
		
		<programlisting language="java"><![CDATA[
twitter.directMessageOperations().sendDirectMessage("kdonald", "You going to the Dolphins game?")]]>
		</programlisting>
		
		<para>
			<classname>DirectMessageOperations</classname> can also be used to read direct messages received by the authenticating user through its <methodname>getDirectMessagesReceived()</methodname> method:
		</para>
		
		<programlisting language="java"><![CDATA[
List<DirectMessage> twitter.directMessageOperations().getDirectMessagesReceived();]]>
		</programlisting>
		
		<para>
			<methodname>getDirectMessagesReceived()</methodname> will return the 20 most recently received direct messages.
		</para>
		
	</section>
</chapter>
